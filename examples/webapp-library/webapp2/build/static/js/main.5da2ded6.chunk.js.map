{"version":3,"sources":["../node_modules/webapp-library/apis sync /^/.//.*$","App.js","serviceWorker.js","index.js"],"names":["map","./Api1","./Api1.js","./Api2","./Api2.js","./Api3","./Api3.js","./Common","./Common.js","./Send","./Send.js","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","keys","Object","resolve","module","exports","parentOrigin","process","getPhoto","_ref2","asyncToGenerator","regenerator_default","a","mark","_callee","_ref","grayscale","blur","url","response","newId","imageBlob","wrap","_context","prev","next","concat","window","innerWidth","innerHeight","fetch","sent","split","blob","abrupt","imageUrl","URL","createObjectURL","stop","_x","apply","this","arguments","App","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","photoClicked","state","displayNewPhoto","_this$state","then","photoInfo","setState","setCallback","libType2","common","_this$state2","_this$state3","onresize","_this$state4","startApis","_ref3","type","apis","console","log","react_default","createElement","src","alt","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5da2ded6.chunk.js","sourcesContent":["var map = {\n\t\"./Api1\": 22,\n\t\"./Api1.js\": 22,\n\t\"./Api2\": 23,\n\t\"./Api2.js\": 23,\n\t\"./Api3\": 24,\n\t\"./Api3.js\": 24,\n\t\"./Common\": 10,\n\t\"./Common.js\": 10,\n\t\"./Send\": 5,\n\t\"./Send.js\": 5\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 89;","import React, { Component } from 'react';\nimport { startApis, libType2 } from 'webapp-library';\nimport { common } from 'webapp-library/LibType2';\nimport { photoClicked, setCallback } from 'webapp-library/LibType2/Api2';\nimport './App.css';\n\nconst parentOrigin = process.env.REACT_APP_PARENT_ORIGIN;\n\nconst getPhoto = async ({ id, grayscale, blur }) => {\n  let url = (id)\n    ? `https://picsum.photos/id/${id}/${window.innerWidth}/${window.innerHeight}/`\n    : `https://picsum.photos/${window.innerWidth}/${window.innerHeight}/`;\n  if (grayscale) url = `${url}?grayscale`;\n  if (blur) url = (grayscale) ? `${url}&blur` : `${url}?blur`;\n  const response = await fetch(url);\n  const newId = response.url.split('/')[4];\n  const imageBlob = await response.blob();\n  return {\n    id: newId, imageUrl: URL.createObjectURL(imageBlob), grayscale, blur,\n  };\n};\n\n// implements Api2\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n\n    setCallback('displayNewPhoto', this.displayNewPhoto);\n    libType2.common.setCallback('displayGrayscale', (grayscale) => {\n      const { id, blur } = this.state;\n      getPhoto({ id, grayscale, blur }).then(photoInfo => this.setState(photoInfo));\n    });\n    common.setCallback('displayBlur', (blur) => {\n      const { id, grayscale } = this.state;\n      getPhoto({ id, grayscale, blur }).then(photoInfo => this.setState(photoInfo));\n    });\n    this.displayNewPhoto();\n\n    window.onresize = () => {\n      const { id, grayscale, blur } = this.state;\n      getPhoto({ id, grayscale, blur }).then(photoInfo => this.setState(photoInfo));\n    };\n\n    startApis(parentOrigin).then(({ type, apis }) => { console.log('startApis: ', type, apis); });\n  }\n\n  photoClicked = () => {\n    const { id } = this.state;\n    photoClicked(id);\n  }\n\n  displayNewPhoto = () => {\n    const { grayscale, blur } = this.state;\n    getPhoto({ grayscale, blur }).then(photoInfo => this.setState(photoInfo));\n  }\n\n  render() {\n    console.log('render webapp2');\n    const { imageUrl } = this.state;\n    if (!imageUrl) return null;\n\n    return (\n      <img src={imageUrl} alt=\"\" onClick={this.photoClicked} />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}