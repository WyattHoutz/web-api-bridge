{"version":3,"sources":["BridgedIframe.js","App.js","serviceWorker.js","index.js"],"names":["bridgedIframes","apiMap","Common","setSend","send","_this","displayBlur","blur","displayGrayscale","grayScale","Api1","_this2","photoSelected","id","Api2","_this3","photoClicked","find","bridgedIframe","props","type","getApiOfType","forEach","displayNewPhoto","Api3","_this4","setGrayscale","grayscale","setBlur","BridgedIframe","setIframe","iframe","_this5","_this5$props","src","apis","url","URL","webApiBridge","WebApiBridge","origin","targetOrigin","bind","push","Object","assertThisInitialized","target","contentWindow","window","addEventListener","event","source","onMessage","data","map","apiClassName","api","onload","console","log","concat","apiName","_this6","this","_this$props","rest","objectWithoutProperties","react_default","a","createElement","assign","title","ref","scrolling","Component","LibType1App","process","LibType2Apps","App","src_BridgedIframe","className","_ref","index","key","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3a76b983.chunk.js","sourcesContent":["\nimport React, { Component } from 'react';\nimport { string, arrayOf } from 'prop-types';\nimport WebApiBridge from '@precor/web-api-bridge';\n\n// to keep track of created iframes that use webApiBridges\nconst bridgedIframes = [];\n\nclass Common {\n  setSend = (send) => {\n    this.send = send;\n  };\n\n  displayBlur = (blur) => {\n    this.send('displayBlur', [blur], false);\n  };\n\n  displayGrayscale = (grayScale) => {\n    this.send('displayGrayscale', [grayScale], false);\n  };\n}\nclass Api1 {\n  setSend = (send) => {\n    this.send = send;\n  };\n\n  photoSelected = (id) => {\n    this.send('photoSelected', [id], false);\n  };\n}\n\nclass Api2 {\n  setSend = (send) => {\n    this.send = send;\n  };\n\n  photoClicked = (id) => {\n    const api1Iframe = bridgedIframes.find(bridgedIframe => (\n      bridgedIframe.props.type === 'LibType1'\n    ));\n    api1Iframe.getApiOfType('Api1').photoSelected(id);\n    bridgedIframes.forEach((bridgedIframe) => {\n      if (bridgedIframe.send !== this.send && bridgedIframe.props.type === 'LibType2') {\n        bridgedIframe.getApiOfType('Api2').displayNewPhoto();\n      }\n    });\n  };\n\n  displayNewPhoto = () => {\n    this.send('displayNewPhoto', null, false);\n  };\n}\n\nclass Api3 {\n  setSend = (send) => {\n    this.send = send;\n  };\n\n  setGrayscale = (grayscale) => {\n    bridgedIframes.forEach((bridgedIframe) => {\n      bridgedIframe.getApiOfType('Common').displayGrayscale(grayscale);\n    });\n  };\n\n  setBlur = (blur) => {\n    bridgedIframes.forEach((bridgedIframe) => {\n      bridgedIframe.getApiOfType('Common').displayBlur(blur);\n    });\n  };\n}\n\nconst apiMap = {\n  Common, Api1, Api2, Api3,\n};\n\nclass BridgedIframe extends Component {\n  setIframe = (iframe) => {\n    if (!iframe || this.iframe) {\n      return;\n    }\n    this.iframe = iframe;\n    const { src, type, apis } = this.props;\n\n    const url = new URL(src);\n    this.webApiBridge = new WebApiBridge();\n    this.webApiBridge.origin = url.origin;\n    this.webApiBridge.targetOrigin = url.origin;\n    this.send = this.webApiBridge.send.bind(this.webApiBridge);\n    bridgedIframes.push(this);\n    this.webApiBridge.target = iframe.contentWindow;\n    window.addEventListener('message', (event) => {\n      if (event && event.source === this.webApiBridge.target) {\n        this.webApiBridge.onMessage(event, event.data);\n      }\n    });\n    this.webApiBridge.apis = apis.map((apiClassName) => {\n      const api = new apiMap[apiClassName]();\n      api.setSend(this.send);\n      return api;\n    });\n    this.iframe.onload = () => {\n      console.log(`${iframe.src} loaded`);\n      this.send('ready', [{ type, apis }], false);\n    };\n  };\n\n  getApiOfType = apiName => (\n    this.webApiBridge.apis.find(api => (\n      api instanceof apiMap[apiName]\n    ))\n  );\n\n  render() {\n    const {\n      src, type, apis, ...rest\n    } = this.props;\n    console.log(`render iframe: ${src}`);\n\n    return (\n      <iframe\n        src={src}\n        title={src}\n        ref={(iframe) => { this.setIframe(iframe); }}\n        scrolling=\"no\"\n        {...rest}\n      />\n    );\n  }\n}\n\nBridgedIframe.propTypes = {\n  src: string.isRequired,\n  type: string.isRequired,\n  apis: arrayOf(string).isRequired,\n};\n\nexport default BridgedIframe;\n","import React from 'react';\nimport BridgedIframe from './BridgedIframe';\nimport './App.css';\n\nconst LibType1App = { src: process.env.REACT_APP_WEBAPP1, type: 'LibType1', apis: ['Common', 'Api1'] };\n\nconst LibType2Apps = [\n  // two instances of webapp1, the first one can set blur and grayscale\n  { src: process.env.REACT_APP_WEBAPP1, type: 'LibType2', apis: ['Common', 'Api2', 'Api3'] },\n  { src: process.env.REACT_APP_WEBAPP1, type: 'LibType2', apis: ['Common', 'Api2'] },\n  // two instances of webapp2\n  { src: process.env.REACT_APP_WEBAPP2, type: 'LibType2', apis: ['Common', 'Api2'] },\n  { src: process.env.REACT_APP_WEBAPP2, type: 'LibType2', apis: ['Common', 'Api2'] },\n];\n\nconst App = () => {\n  console.log('render parent');\n  return (\n    <div>\n      <div>\n        <BridgedIframe\n          className=\"fullscreen-iframe\"\n          src={LibType1App.src}\n          type={LibType1App.type}\n          apis={LibType1App.apis}\n        />\n      </div>\n      <div className=\"container\">\n        <div className=\"row\">\n          {LibType2Apps.map(({ src, type, apis }, index) => (\n            <BridgedIframe\n              className=\"image-select\"\n              key={`LibType2_${index}`}\n              src={src}\n              type={type}\n              apis={apis}\n            />\n          ))}\n        </div>\n        <div className=\"overlay-text\">\n          Click on one of the 4 photos\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}