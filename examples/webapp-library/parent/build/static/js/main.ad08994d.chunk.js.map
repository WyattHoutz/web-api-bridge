{"version":3,"sources":["BridgedIframe.js","App.js","serviceWorker.js","index.js"],"names":["createLibInstance","webApiBridge","apis","findApiOfType","apiName","this","find","api","apiMap","registeredSend","bridgeSend","outgoingCalls","funcName","args","wantResponse","console","log","libInstances","instances","add","libInstance","push","executeOnType","fn","forEach","instance","Common","setSend","send","displayBlur","blur","displayGrayscale","grayScale","Api1","photoSelected","id","Api2","photoClicked","displayNewPhoto","Api3","setGrayscale","grayscale","setBlur","BridgedIframe","props","messageListener","event","source","target","onMessage","data","startApis","Promise","resolve","type","registerCallback","implemented","apiInstance","undefined","Error","setIframe","iframe","contentWindow","src","url","URL","WebApiBridge","origin","targetOrigin","bind","window","addEventListener","map","apiClassName","apiObj","Object","keys","removeEventListener","rest","title","ref","scrolling","React","Component","LibType1App","process","LibType2Apps","App","className","index","key","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ad08994d.chunk.js","sourcesContent":["/* eslint-disable max-classes-per-file */\nimport React from 'react';\nimport WebApiBridge from '@precor/web-api-bridge';\nimport { arrayOf, string } from 'prop-types';\n\n// createLibInstance factory, libs use apis to communicate through a bridge\nconst createLibInstance = ({ webApiBridge, apis }) => ({\n  webApiBridge,\n  apis,\n  findApiOfType(apiName) {\n    // eslint-disable-next-line no-use-before-define\n    return this.webApiBridge.apis.find((api) => (api instanceof apiMap[apiName]));\n  },\n});\n\nconst registeredSend = (bridgeSend, outgoingCalls) => (funcName, args, wantResponse) => {\n  if (outgoingCalls[funcName]) {\n    return bridgeSend(funcName, args, wantResponse);\n  }\n  console.log(`${funcName} was not registered`);\n  return null;\n};\n\n// to keep track of created libs that use apis to communicate\nclass libInstances {\n  static instances = [];\n\n  static add = (libInstance) => libInstances.instances.push(libInstance);\n\n  static executeOnType = (apiName, fn) => {\n    libInstances.instances.forEach((instance) => {\n      const api = instance.findApiOfType(apiName);\n      if (api) fn(api);\n    });\n  }\n}\n\nclass Common {\n  constructor() {\n    this.outgoingCalls = {\n      displayBlur: null,\n      displayGrayscale: null,\n    };\n  }\n\n  setSend = (bridgeSend) => {\n    this.send = registeredSend(bridgeSend, this.outgoingCalls);\n  }\n\n  displayBlur = (blur) => {\n    this.send('displayBlur', [blur], false);\n  };\n\n  displayGrayscale = (grayScale) => {\n    this.send('displayGrayscale', [grayScale], false);\n  };\n}\n\nclass Api1 {\n  constructor() {\n    this.outgoingCalls = {\n      photoSelected: null,\n    };\n  }\n\n\n  setSend = (bridgeSend) => {\n    this.send = registeredSend(bridgeSend, this.outgoingCalls);\n  }\n\n  photoSelected = (id) => {\n    this.send('photoSelected', [id], false);\n  };\n}\n\nclass Api2 {\n  constructor() {\n    this.outgoingCalls = {\n      displayNewPhoto: null,\n    };\n  }\n\n\n  setSend = (bridgeSend) => {\n    this.send = registeredSend(bridgeSend, this.outgoingCalls);\n  }\n\n  photoClicked = (id) => {\n    libInstances.executeOnType('Api1', (api) => api.photoSelected(id));\n    libInstances.executeOnType('Api2', (api) => { if (api !== this) api.displayNewPhoto(); });\n  };\n\n  displayNewPhoto = () => {\n    this.send('displayNewPhoto', null, false);\n  };\n}\n\nclass Api3 {\n  setSend = () => {};\n\n  setGrayscale = (grayscale) => {\n    libInstances.executeOnType('Common', (api) => api.displayGrayscale(grayscale));\n  };\n\n  setBlur = (blur) => {\n    libInstances.executeOnType('Common', (api) => api.displayBlur(blur));\n  };\n}\n\nconst apiMap = {\n  Common, Api1, Api2, Api3,\n};\n\nclass BridgedIframe extends React.Component {\n  constructor(props) {\n    super(props);\n    const { src, type, apis } = props;\n    const url = new URL(src);\n    this.type = type;\n    this.apis = apis;\n    this.webApiBridge = new WebApiBridge();\n    this.webApiBridge.origin = url.origin;\n    this.webApiBridge.targetOrigin = url.origin;\n    const send = this.webApiBridge.send.bind(this.webApiBridge);\n    libInstances.add(createLibInstance({ webApiBridge: this.webApiBridge, apis }));\n    window.addEventListener('message', this.messageListener);\n    this.webApiBridge.apis = apis.map((apiClassName) => {\n      const api = new apiMap[apiClassName]();\n      api.setSend(send);\n      return api;\n    });\n    this.webApiBridge.apis.push(this);\n  }\n\n  componentWillUnmount() {\n    this.webApiBridge.apis.forEach((apiObj) => {\n      const api = apiObj;\n      if (api.outgoingCalls) {\n        Object.keys(api.outgoingCalls).forEach((funcName) => {\n          api.outgoingCalls[funcName] = null;\n        });\n      }\n    });\n    window.removeEventListener('message', this.messageListener);\n  }\n\n  messageListener = (event) => {\n    if (event && event.source === this.webApiBridge.target) {\n      this.webApiBridge.onMessage(event, event.data);\n    }\n  };\n\n  startApis = () => (\n    new Promise((resolve) => resolve({ type: this.type, apis: this.apis }))\n  );\n\n  registerCallback = (funcName, implemented) => (\n    new Promise((resolve) => {\n      const api = this.webApiBridge.apis.find((apiInstance) => (\n        apiInstance.outgoingCalls[funcName]) !== undefined);\n      if (!api) {\n        throw new Error(`registerCallback failed, ${funcName} does not exist`);\n      }\n      api.outgoingCalls[funcName] = implemented;\n      resolve();\n    })\n  );\n\n  setIframe = (iframe) => {\n    if (!iframe || this.iframe) {\n      return;\n    }\n    this.iframe = iframe;\n    this.webApiBridge.target = iframe.contentWindow;\n  };\n\n  render() {\n    const {\n      src, type, apis, ...rest\n    } = this.props;\n    console.log(`render iframe: ${src}`);\n    return (\n      <iframe\n        src={src}\n        title={src}\n        ref={(iframe) => { this.setIframe(iframe); }}\n        scrolling=\"no\"\n        {...rest}\n      />\n    );\n  }\n}\n\nBridgedIframe.propTypes = {\n  src: string.isRequired,\n  type: string.isRequired,\n  apis: arrayOf(string).isRequired,\n};\n\nexport default BridgedIframe;\n","import React from 'react';\nimport BridgedIframe from './BridgedIframe';\nimport './App.css';\n\nconst LibType1App = { src: process.env.REACT_APP_WEBAPP1, type: 'LibType1', apis: ['Common', 'Api1'] };\n\nconst LibType2Apps = [\n  // two instances of webapp1, the first one can set blur and grayscale\n  { src: process.env.REACT_APP_WEBAPP1, type: 'LibType2', apis: ['Common', 'Api2', 'Api3'] },\n  { src: process.env.REACT_APP_WEBAPP1, type: 'LibType2', apis: ['Common', 'Api2'] },\n  // two instances of webapp2\n  { src: process.env.REACT_APP_WEBAPP2, type: 'LibType2', apis: ['Common', 'Api2'] },\n  { src: process.env.REACT_APP_WEBAPP2, type: 'LibType2', apis: ['Common', 'Api2'] },\n];\n\nconst App = () => {\n  console.log('render parent');\n  return (\n    <div>\n      <div>\n        <BridgedIframe\n          className=\"fullscreen-iframe\"\n          src={LibType1App.src}\n          type={LibType1App.type}\n          apis={LibType1App.apis}\n        />\n      </div>\n      <div className=\"container\">\n        <div className=\"row\">\n          {LibType2Apps.map(({ src, type, apis }, index) => (\n            <BridgedIframe\n              className=\"image-select\"\n              // eslint-disable-next-line react/no-array-index-key\n              key={`LibType2_${index}`}\n              src={src}\n              type={type}\n              apis={apis}\n            />\n          ))}\n        </div>\n        <div className=\"overlay-text\">\n          Click on one of the 4 photos\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}