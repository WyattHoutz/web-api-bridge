{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api2Apps","process","bridgedIframes","Api1","send","_this","this","Object","classCallCheck","setSend","photoSelected","id","Api2","_this2","photoClicked","find","bridgedIframe","props","api","forEach","displayNewPhoto","BridgedIframe","setIframe","iframe","_this3","_this3$props","src","url","URL","webApiBridge","WebApiBridge","origin","targetOrigin","apis","bind","push","assertThisInitialized","target","contentWindow","window","addEventListener","event","source","onMessage","data","onload","console","log","concat","_this4","_this$props","rest","objectWithoutProperties","react_default","a","createElement","assign","title","ref","scrolling","Component","App","App_BridgedIframe","className","map","index","key","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aa69adac.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport WebApiBridge from '@precor/web-api-bridge';\nimport './App.css';\n\nconst api1App = process.env.REACT_APP_WEBAPP1API1;\n\nconst api2Apps = [\n  // two instances of webapp1\n  process.env.REACT_APP_WEBAPP1API2,\n  process.env.REACT_APP_WEBAPP1API2,\n  // two instances of webapp2, with the same url (for now)\n  process.env.REACT_APP_WEBAPP2,\n  process.env.REACT_APP_WEBAPP2,\n];\n\n// to keep track of created iframes that use webApiBridges\nconst bridgedIframes = [];\n\nclass Api1 {\n  constructor(send) {\n    this.send = send;\n  }\n\n  setSend = (send) => {\n    this.send = send;\n  };\n\n  photoSelected = (id) => {\n    this.send('photoSelected', [id], false);\n  };\n}\n\nclass Api2 {\n  constructor(send) {\n    this.send = send;\n  }\n\n  setSend = (send) => {\n    this.send = send;\n  };\n\n  photoClicked = (id) => {\n    const api1Iframe = bridgedIframes.find(bridgedIframe => (\n      bridgedIframe.props.api instanceof Api1\n    ));\n    api1Iframe.props.api.photoSelected(id);\n    bridgedIframes.forEach((bridgedIframe) => {\n      if (bridgedIframe.props.api !== this && bridgedIframe.props.api instanceof Api2) {\n        bridgedIframe.props.api.displayNewPhoto();\n      }\n    });\n  };\n\n  displayNewPhoto = () => {\n    this.send('displayNewPhoto', null, false);\n  };\n}\n\nclass BridgedIframe extends Component {\n  setIframe = (iframe) => {\n    if (!iframe || this.iframe) {\n      return;\n    }\n    this.iframe = iframe;\n    const { src, api } = this.props;\n\n    const url = new URL(src);\n    this.webApiBridge = new WebApiBridge();\n    this.webApiBridge.origin = url.origin;\n    this.webApiBridge.targetOrigin = url.origin;\n    this.webApiBridge.apis = [api];\n    api.setSend(this.webApiBridge.send.bind(this.webApiBridge));\n    bridgedIframes.push(this);\n    this.webApiBridge.target = iframe.contentWindow;\n    window.addEventListener('message', (event) => {\n      if (event && event.source === this.webApiBridge.target) {\n        this.webApiBridge.onMessage(event, event.data);\n      }\n    });\n    this.iframe.onload = () => {\n      console.log(`${iframe.src} loaded`);\n    };\n  }\n\n  render() {\n    const { src, api, ...rest } = this.props;\n    console.log(`render iframe: ${src}`);\n\n    return (\n      <iframe\n        src={src}\n        title={src}\n        ref={(iframe) => { this.setIframe(iframe); }}\n        scrolling=\"no\"\n        {...rest}\n      />\n    );\n  }\n}\n\nconst App = () => {\n  console.log('render parent');\n  return (\n    <div>\n      <div>\n        <BridgedIframe\n          className=\"fullscreen-iframe\"\n          src={api1App}\n          api={new Api1()}\n        />\n      </div>\n      <div className=\"container\">\n        <div className=\"row\">\n          {api2Apps.map((src, index) => (\n            <BridgedIframe\n              className=\"image-select\"\n              key={index}\n              src={src}\n              api={new Api2()}\n            />\n          ))}\n        </div>\n        <div className=\"overlay-text\">\n          Click on one of the 4 photos\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}