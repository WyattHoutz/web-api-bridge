{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["parentOrigin","process","getPhoto","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","id","response","newId","imageBlob","wrap","_context","prev","next","fetch","concat","window","innerWidth","innerHeight","sent","url","split","blob","abrupt","imageUrl","URL","createObjectURL","stop","_x","apply","this","arguments","App","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","displayNewPhoto","then","photoInfo","setState","photoClicked","send","state","webApiBridge","WebApiBridge","ipc","parent","origin","targetOrigin","bind","apis","assertThisInitialized","addEventListener","event","onMessage","data","onresize","console","log","react_default","createElement","src","alt","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gRAIMA,SAAeC,4BAEfC,EAAQ,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EAAOC,GAAP,IAAAC,EAAAC,EAAAC,EAAA,OAAAP,EAAAC,EAAAO,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACQC,MAAOR,EAAD,4BAAAS,OACGT,EADH,KAAAS,OACSC,OAAOC,WADhB,KAAAF,OAC8BC,OAAOE,YADrC,8BAAAH,OAEAC,OAAOC,WAFP,KAAAF,OAEqBC,OAAOE,YAF5B,MADd,cACTX,EADSI,EAAAQ,KAITX,EAAQD,EAASa,IAAIC,MAAM,KAAK,GAJvBV,EAAAE,KAAA,EAKSN,EAASe,OALlB,cAKTb,EALSE,EAAAQ,KAAAR,EAAAY,OAAA,SAMR,CAAEjB,GAAIE,EAAOgB,SAAUC,IAAIC,gBAAgBjB,KANnC,wBAAAE,EAAAgB,SAAAtB,MAAH,gBAAAuB,GAAA,OAAA7B,EAAA8B,MAAAC,KAAAC,YAAA,GAiDCC,cAtCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAlC,OAAAmC,EAAA,EAAAnC,CAAA8B,KAAAE,IACjBE,EAAAlC,OAAAoC,EAAA,EAAApC,CAAA8B,KAAA9B,OAAAqC,EAAA,EAAArC,CAAAgC,GAAAM,KAAAR,KAAMG,KAkBRM,gBAAkB,WAChBzC,IAAW0C,KAAK,SAACC,GAAD,OAAeP,EAAKQ,SAASD,MApB5BP,EAuBnBS,aAAe,WACbT,EAAKU,KAAK,eAAgB,CAACV,EAAKW,MAAMvC,KAAK,IArB3C4B,EAAKY,aAAe,IAAIC,IACxBb,EAAKY,aAAaE,IAAMhC,OAAOiC,OAC/Bf,EAAKY,aAAaI,OAAStD,EAC3BsC,EAAKY,aAAaK,aAAevD,EACjCsC,EAAKU,KAAOV,EAAKY,aAAaF,KAAKQ,KAAKlB,EAAKY,cAC7CZ,EAAKY,aAAaO,KAAO,CAACrD,OAAAsD,EAAA,EAAAtD,CAAAkC,IAC1BlB,OAAOuC,iBAAiB,UAAW,SAAAC,GAAK,OAAItB,EAAKY,aAAaW,UAAUD,EAAOA,EAAME,QACrFxB,EAAKW,MAAQ,GACbX,EAAKK,kBACLvB,OAAO2C,SAAW,WAChB7D,EAASoC,EAAKW,MAAMvC,IAAIkC,KAAK,SAACC,GAAD,OAAeP,EAAKQ,SAASD,MAb3CP,wEA4BjB0B,QAAQC,IAAI,kBADL,IAECrC,EAAaM,KAAKe,MAAlBrB,SACR,OAAKA,EAGHsC,EAAA3D,EAAA4D,cAAA,OAAKC,IAAKxC,EAAUyC,IAAI,GAAGC,QAASpC,KAAKa,eAHrB,YA/BRwB,aCJEC,QACW,cAA7BpD,OAAOqD,SAASC,UAEe,UAA7BtD,OAAOqD,SAASC,UAEhBtD,OAAOqD,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOX,EAAA3D,EAAA4D,cAACW,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC","file":"static/js/main.0b42e85a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport WebApiBridge from '@precor/web-api-bridge';\nimport './App.css';\n\nconst parentOrigin = process.env.REACT_APP_PARENT_ORIGIN;\n\nconst getPhoto = async (id) => {\n  const response = await fetch((id)\n    ? `https://picsum.photos/id/${id}/${window.innerWidth}/${window.innerHeight}/`\n    : `https://picsum.photos/${window.innerWidth}/${window.innerHeight}/`);\n  const newId = response.url.split('/')[4];\n  const imageBlob = await response.blob();\n  return { id: newId, imageUrl: URL.createObjectURL(imageBlob) };\n};\n\n// implements Api2\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.webApiBridge = new WebApiBridge();\n    this.webApiBridge.ipc = window.parent;\n    this.webApiBridge.origin = parentOrigin;\n    this.webApiBridge.targetOrigin = parentOrigin;\n    this.send = this.webApiBridge.send.bind(this.webApiBridge);\n    this.webApiBridge.apis = [this];\n    window.addEventListener('message', event => this.webApiBridge.onMessage(event, event.data));\n    this.state = {};\n    this.displayNewPhoto();\n    window.onresize = () => {\n      getPhoto(this.state.id).then((photoInfo) => this.setState(photoInfo));\n    };\n    // enable to log all webapp messsages:\n    // this.webApiBridge.listener = (message) => { console.log(message); };\n  }\n\n  displayNewPhoto = () => {\n    getPhoto().then((photoInfo) => this.setState(photoInfo));\n  }\n\n  photoClicked = () => {\n    this.send('photoClicked', [this.state.id], false)\n  }\n\n  render() {\n    console.log('render webapp2');\n    const { imageUrl } = this.state;\n    if (!imageUrl) return null;\n\n    return (\n      <img src={imageUrl} alt=\"\" onClick={this.photoClicked} />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}